// This file was GENERATED by command:
//     pump.py to_xml.h.pump
// DO NOT EDIT BY HAND!!!

// This file was GENERATED by command:
//     pump.py to_xml.hpp.pump
// DO NOT EDIT BY HAND!!!

#ifndef TO_XML_HPP
#define TO_XML_HPP
#include <string>
#include <vector>
#include <map>

inline
void xml_escape(std::string &sString) {
        int length = sString.length();
        char buf[length * 10 + 128];
        memset(buf, 0, sizeof(buf));

        char* it = (char*) sString.c_str();
        char *out = buf;
	int ch = 0;
	for (int i = 0; i < length; ++i){
		ch = (unsigned char)(*it);
                switch (ch) {

#define XML_ESCAPE(ch, rep)  \
		case ch: \
			memcpy(out, rep, sizeof(rep)-1); \
			out += (sizeof(rep)-1); \
                        break;\

		XML_ESCAPE('<', "&lt;");
		XML_ESCAPE('>', "&gt;");
		XML_ESCAPE('&', "&amp;");
		XML_ESCAPE('\'', "&apos;");
		XML_ESCAPE('\"', "&quot;");

                default:
			if (!( (0 <= ch) && (ch <= 31) &&
				(ch != 9) && (ch != 10) && (ch != 13)) )
			{
				*out = ch;
				++out;
                        }
                }
		++it;
        }
        sString = buf;
        return;
}

#define DEF_BASETYPE_TO_XML_VALUE(fmt, type) \
inline \
void to_xml(std::string &out, type value) { \
    char buffer[sizeof(typeof(value))*3+4]; \
    snprintf(buffer, sizeof(buffer), fmt, value); \
    out.append(buffer); \
} \


DEF_BASETYPE_TO_XML_VALUE("%d", int)
DEF_BASETYPE_TO_XML_VALUE("%u", unsigned int)
DEF_BASETYPE_TO_XML_VALUE("%ld", long)
DEF_BASETYPE_TO_XML_VALUE("%lu", unsigned long)
DEF_BASETYPE_TO_XML_VALUE("%lld", long long)
DEF_BASETYPE_TO_XML_VALUE("%llu", unsigned long long)
DEF_BASETYPE_TO_XML_VALUE("%f", double)
DEF_BASETYPE_TO_XML_VALUE("%Lf", long double)


inline
void to_xml(std::string &out, std::string str) {
	xml_escape(str);
	out.append(str);
}

inline
void to_xml(std::string &out, char const * str) {
	to_xml(out, std::string(str));
}


#define DEF_BASETYPE_TO_XML_MEMBER(t) \
inline \
void to_xml_member2(std::string & out, char const * name, \
    std::vector<t> const & vec) { \
    std::string head_tag = "<"; \
    head_tag += name; head_tag += ">"; \
    std::string tail_tag = "</"; \
    tail_tag += name; tail_tag += ">"; \
	for ( size_t i=0, len=vec.size(); \
            i<len; ++i){ \
            out.append(head_tag); \
	        to_xml(out, vec[i]); \
            out.append(tail_tag); \
	} \
} \
inline  \
void to_xml_member2(std::string & out, char const *name, t const &value)  \
    {  \
        out.append("<");  \
        out.append(name);  \
        out.append(">");  \
        to_xml(out, value);  \
        out.append("</");  \
        out.append(name);  \
        out.append(">"); \
    }  \


DEF_BASETYPE_TO_XML_MEMBER(int)
DEF_BASETYPE_TO_XML_MEMBER(unsigned int)
DEF_BASETYPE_TO_XML_MEMBER(long)
DEF_BASETYPE_TO_XML_MEMBER(unsigned long)
DEF_BASETYPE_TO_XML_MEMBER(long long)
DEF_BASETYPE_TO_XML_MEMBER(unsigned long long)
DEF_BASETYPE_TO_XML_MEMBER(double)
DEF_BASETYPE_TO_XML_MEMBER(long double)
DEF_BASETYPE_TO_XML_MEMBER(char const*)
DEF_BASETYPE_TO_XML_MEMBER(std::string)

template <typename t>
inline
void to_xml_member(std::string & out, char const *name,
    std::vector<t> const & vec) {
	for ( size_t i=0, len=vec.size();
            i<len; ++i){
	       to_xml(out, vec[i]);
	}
}

#define to_xml_member(out, name) \
    do { \
        to_xml_member2(out, #name, name); \
    } while(0 )\


template<typename t>
inline
void to_xml_member2(std::string & out, char const *name, t const &value)
    {
        to_xml(out, value, name);
    }


template <typename t>
inline
void to_xml(std::string & out, std::map<std::string, t> const & map) {
    size_t i=0;
    for (typeof(map.begin()) it = map.begin(), iend = map.end();
        it!=iend; ++it, ++i) {
       to_xml_member2(out, it->first.c_str(),  it->second);
    }
}

template <typename t>
inline
void to_xml(std::string & out, t const &v)  {
    v.to_xml(out);
}

template <typename t>
inline
void to_xml(std::string & out, t const &v, char const *name) {
    v.to_xml(out, name);
}

template <typename t>
inline
std::string to_xml(t const & v) {
    std::string out;
    to_xml(out, v);
    return out;
}

template <typename t>
inline
void to_xml_helper(std::string & out, t const &v, char const *name) {
    to_xml(out, v, name);
}

template <typename t>
inline
std::string to_xml_helper(t const & v) {
    return to_xml(v);
}

#define CAT(a, b) PRIMITIVE_CAT(a, b)
#define PRIMITIVE_CAT(a, b) a ## b
// binary intermediate split
#define SPLIT(i, im) PRIMITIVE_CAT(SPLIT_, i)(im)
#define SPLIT_0(a, b) a
#define SPLIT_1(a, b) b

// bit complement
#define COMPL(bit) PRIMITIVE_CAT(COMPL_, bit)
#define COMPL_0 1
#define COMPL_1 0
// nullary parentheses detection
#define IS_NULLARY(x) SPLIT(0, CAT(IS_NULLARY_R_, IS_NULLARY_C x))
#define IS_NULLARY_C() 1
#define IS_NULLARY_R_1 1, ~
#define IS_NULLARY_R_IS_NULLARY_C 0, ~

// boolean conversion
#define BOOL(x) COMPL(IS_NULLARY(PRIMITIVE_CAT(BOOL_, x)))
#define BOOL_0 ()

// bit-oriented if control structure
#define IIF(bit) PRIMITIVE_CAT(IIF_, bit)
#define IIF_0(t, f) f
#define IIF_1(t, f) t
// number-oriented if control structure
#define IF(cond) IIF(BOOL(cond))
#define EMPTY()
// 1x and 2x deferral macros
#define DEFER(macro) macro EMPTY()
#define OBSTRUCT() DEFER(EMPTY)()

#define XML_ATTR1(...) (1, ##__VA_ARGS__)
#define XML_ATTR2(...) (2, ##__VA_ARGS__)
#define XML_ATTR3(...) (3, ##__VA_ARGS__)
#define XML_ATTR4(...) (4, ##__VA_ARGS__)
#define XML_ATTR5(...) (5, ##__VA_ARGS__)
#define XML_ATTR6(...) (6, ##__VA_ARGS__)
#define XML_ATTR7(...) (7, ##__VA_ARGS__)
#define XML_ATTR8(...) (8, ##__VA_ARGS__)
#define XML_ATTR9(...) (9, ##__VA_ARGS__)
#define XML_ATTR10(...) (10, ##__VA_ARGS__)
#define XML_ATTR11(...) (11, ##__VA_ARGS__)
#define XML_ATTR12(...) (12, ##__VA_ARGS__)
#define XML_ATTR13(...) (13, ##__VA_ARGS__)
#define XML_ATTR14(...) (14, ##__VA_ARGS__)
#define XML_ATTR15(...) (15, ##__VA_ARGS__)
#define XML_ATTR16(...) (16, ##__VA_ARGS__)
#define XML_ATTR17(...) (17, ##__VA_ARGS__)
#define XML_ATTR18(...) (18, ##__VA_ARGS__)
#define XML_ATTR19(...) (19, ##__VA_ARGS__)
#define XML_ATTR20(...) (20, ##__VA_ARGS__)
#define XML_ATTR21(...) (21, ##__VA_ARGS__)
#define XML_ATTR22(...) (22, ##__VA_ARGS__)
#define XML_ATTR23(...) (23, ##__VA_ARGS__)
#define XML_ATTR24(...) (24, ##__VA_ARGS__)
#define XML_ATTR25(...) (25, ##__VA_ARGS__)
#define XML_ATTR26(...) (26, ##__VA_ARGS__)
#define XML_ATTR27(...) (27, ##__VA_ARGS__)
#define XML_ATTR28(...) (28, ##__VA_ARGS__)
#define XML_ATTR29(...) (29, ##__VA_ARGS__)
#define XML_ATTR30(...) (30, ##__VA_ARGS__)
#define UNPACK1(...) __VA_ARGS__
#define UNPACK(a) CAT(UNPACK1,a)

#define UNPACK_HEAD1(a, ...) a
#define UNPACK_HEAD(a) UNPACK_HEAD1 a

#define UNPACK_REST1(a, ...) __VA_ARGS__
#define UNPACK_REST(a) UNPACK_REST1 a

#define PACK_ARGS(...) (__VA_ARGS__)

#define MACRO_CALL(macro, ...) macro(__VA_ARGS__)

#define IS_SIMPLE_PARAM(x) SPLIT(0, CAT(IS_SIMPLE_PARAM_R_, \
    IS_SIMPLE_PARAM_C_ x))
#define IS_SIMPLE_PARAM_C_(...) 0
#define IS_SIMPLE_PARAM_R_0 0, ~
#define IS_SIMPLE_PARAM_R_IS_SIMPLE_PARAM_C_ 1, ~

#define XML_ATTR_OUT_1(  attr1) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\


#define XML_ATTR_OUT_2(  attr1 , attr2) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\


#define XML_ATTR_OUT_3(  attr1 , attr2 , attr3) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\


#define XML_ATTR_OUT_4(  attr1 , attr2 , attr3 , attr4) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\


#define XML_ATTR_OUT_5(  attr1 , attr2 , attr3 , attr4 , attr5) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\


#define XML_ATTR_OUT_6(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\


#define XML_ATTR_OUT_7(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\


#define XML_ATTR_OUT_8(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\


#define XML_ATTR_OUT_9(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\


#define XML_ATTR_OUT_10(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\


#define XML_ATTR_OUT_11(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\


#define XML_ATTR_OUT_12(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\


#define XML_ATTR_OUT_13(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\


#define XML_ATTR_OUT_14(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\


#define XML_ATTR_OUT_15(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\


#define XML_ATTR_OUT_16(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\


#define XML_ATTR_OUT_17(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\


#define XML_ATTR_OUT_18(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\


#define XML_ATTR_OUT_19(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\


#define XML_ATTR_OUT_20(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\


#define XML_ATTR_OUT_21(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\


#define XML_ATTR_OUT_22(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21 , attr22) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\
		out.append(", " #attr22 "=\"");\
		to_xml(out, v.attr22); \
	out.append("\"");\


#define XML_ATTR_OUT_23(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21 , attr22 , \
    attr23) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\
		out.append(", " #attr22 "=\"");\
		to_xml(out, v.attr22); \
	out.append("\"");\
		out.append(", " #attr23 "=\"");\
		to_xml(out, v.attr23); \
	out.append("\"");\


#define XML_ATTR_OUT_24(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21 , attr22 , \
    attr23 , attr24) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\
		out.append(", " #attr22 "=\"");\
		to_xml(out, v.attr22); \
	out.append("\"");\
		out.append(", " #attr23 "=\"");\
		to_xml(out, v.attr23); \
	out.append("\"");\
		out.append(", " #attr24 "=\"");\
		to_xml(out, v.attr24); \
	out.append("\"");\


#define XML_ATTR_OUT_25(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21 , attr22 , \
    attr23 , attr24 , attr25) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\
		out.append(", " #attr22 "=\"");\
		to_xml(out, v.attr22); \
	out.append("\"");\
		out.append(", " #attr23 "=\"");\
		to_xml(out, v.attr23); \
	out.append("\"");\
		out.append(", " #attr24 "=\"");\
		to_xml(out, v.attr24); \
	out.append("\"");\
		out.append(", " #attr25 "=\"");\
		to_xml(out, v.attr25); \
	out.append("\"");\


#define XML_ATTR_OUT_26(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21 , attr22 , \
    attr23 , attr24 , attr25 , attr26) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\
		out.append(", " #attr22 "=\"");\
		to_xml(out, v.attr22); \
	out.append("\"");\
		out.append(", " #attr23 "=\"");\
		to_xml(out, v.attr23); \
	out.append("\"");\
		out.append(", " #attr24 "=\"");\
		to_xml(out, v.attr24); \
	out.append("\"");\
		out.append(", " #attr25 "=\"");\
		to_xml(out, v.attr25); \
	out.append("\"");\
		out.append(", " #attr26 "=\"");\
		to_xml(out, v.attr26); \
	out.append("\"");\


#define XML_ATTR_OUT_27(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21 , attr22 , \
    attr23 , attr24 , attr25 , attr26 , attr27) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\
		out.append(", " #attr22 "=\"");\
		to_xml(out, v.attr22); \
	out.append("\"");\
		out.append(", " #attr23 "=\"");\
		to_xml(out, v.attr23); \
	out.append("\"");\
		out.append(", " #attr24 "=\"");\
		to_xml(out, v.attr24); \
	out.append("\"");\
		out.append(", " #attr25 "=\"");\
		to_xml(out, v.attr25); \
	out.append("\"");\
		out.append(", " #attr26 "=\"");\
		to_xml(out, v.attr26); \
	out.append("\"");\
		out.append(", " #attr27 "=\"");\
		to_xml(out, v.attr27); \
	out.append("\"");\


#define XML_ATTR_OUT_28(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21 , attr22 , \
    attr23 , attr24 , attr25 , attr26 , attr27 , attr28) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\
		out.append(", " #attr22 "=\"");\
		to_xml(out, v.attr22); \
	out.append("\"");\
		out.append(", " #attr23 "=\"");\
		to_xml(out, v.attr23); \
	out.append("\"");\
		out.append(", " #attr24 "=\"");\
		to_xml(out, v.attr24); \
	out.append("\"");\
		out.append(", " #attr25 "=\"");\
		to_xml(out, v.attr25); \
	out.append("\"");\
		out.append(", " #attr26 "=\"");\
		to_xml(out, v.attr26); \
	out.append("\"");\
		out.append(", " #attr27 "=\"");\
		to_xml(out, v.attr27); \
	out.append("\"");\
		out.append(", " #attr28 "=\"");\
		to_xml(out, v.attr28); \
	out.append("\"");\


#define XML_ATTR_OUT_29(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21 , attr22 , \
    attr23 , attr24 , attr25 , attr26 , attr27 , attr28 , attr29) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\
		out.append(", " #attr22 "=\"");\
		to_xml(out, v.attr22); \
	out.append("\"");\
		out.append(", " #attr23 "=\"");\
		to_xml(out, v.attr23); \
	out.append("\"");\
		out.append(", " #attr24 "=\"");\
		to_xml(out, v.attr24); \
	out.append("\"");\
		out.append(", " #attr25 "=\"");\
		to_xml(out, v.attr25); \
	out.append("\"");\
		out.append(", " #attr26 "=\"");\
		to_xml(out, v.attr26); \
	out.append("\"");\
		out.append(", " #attr27 "=\"");\
		to_xml(out, v.attr27); \
	out.append("\"");\
		out.append(", " #attr28 "=\"");\
		to_xml(out, v.attr28); \
	out.append("\"");\
		out.append(", " #attr29 "=\"");\
		to_xml(out, v.attr29); \
	out.append("\"");\


#define XML_ATTR_OUT_30(  attr1 , attr2 , attr3 , attr4 , attr5 , attr6 , \
    attr7 , attr8 , attr9 , attr10 , attr11 , attr12 , attr13 , attr14 , \
    attr15 , attr16 , attr17 , attr18 , attr19 , attr20 , attr21 , attr22 , \
    attr23 , attr24 , attr25 , attr26 , attr27 , attr28 , attr29 , attr30) \
			out.append(" " #attr1 "=\"");\
		to_xml(out, v.attr1); \
	out.append("\"");\
		out.append(", " #attr2 "=\"");\
		to_xml(out, v.attr2); \
	out.append("\"");\
		out.append(", " #attr3 "=\"");\
		to_xml(out, v.attr3); \
	out.append("\"");\
		out.append(", " #attr4 "=\"");\
		to_xml(out, v.attr4); \
	out.append("\"");\
		out.append(", " #attr5 "=\"");\
		to_xml(out, v.attr5); \
	out.append("\"");\
		out.append(", " #attr6 "=\"");\
		to_xml(out, v.attr6); \
	out.append("\"");\
		out.append(", " #attr7 "=\"");\
		to_xml(out, v.attr7); \
	out.append("\"");\
		out.append(", " #attr8 "=\"");\
		to_xml(out, v.attr8); \
	out.append("\"");\
		out.append(", " #attr9 "=\"");\
		to_xml(out, v.attr9); \
	out.append("\"");\
		out.append(", " #attr10 "=\"");\
		to_xml(out, v.attr10); \
	out.append("\"");\
		out.append(", " #attr11 "=\"");\
		to_xml(out, v.attr11); \
	out.append("\"");\
		out.append(", " #attr12 "=\"");\
		to_xml(out, v.attr12); \
	out.append("\"");\
		out.append(", " #attr13 "=\"");\
		to_xml(out, v.attr13); \
	out.append("\"");\
		out.append(", " #attr14 "=\"");\
		to_xml(out, v.attr14); \
	out.append("\"");\
		out.append(", " #attr15 "=\"");\
		to_xml(out, v.attr15); \
	out.append("\"");\
		out.append(", " #attr16 "=\"");\
		to_xml(out, v.attr16); \
	out.append("\"");\
		out.append(", " #attr17 "=\"");\
		to_xml(out, v.attr17); \
	out.append("\"");\
		out.append(", " #attr18 "=\"");\
		to_xml(out, v.attr18); \
	out.append("\"");\
		out.append(", " #attr19 "=\"");\
		to_xml(out, v.attr19); \
	out.append("\"");\
		out.append(", " #attr20 "=\"");\
		to_xml(out, v.attr20); \
	out.append("\"");\
		out.append(", " #attr21 "=\"");\
		to_xml(out, v.attr21); \
	out.append("\"");\
		out.append(", " #attr22 "=\"");\
		to_xml(out, v.attr22); \
	out.append("\"");\
		out.append(", " #attr23 "=\"");\
		to_xml(out, v.attr23); \
	out.append("\"");\
		out.append(", " #attr24 "=\"");\
		to_xml(out, v.attr24); \
	out.append("\"");\
		out.append(", " #attr25 "=\"");\
		to_xml(out, v.attr25); \
	out.append("\"");\
		out.append(", " #attr26 "=\"");\
		to_xml(out, v.attr26); \
	out.append("\"");\
		out.append(", " #attr27 "=\"");\
		to_xml(out, v.attr27); \
	out.append("\"");\
		out.append(", " #attr28 "=\"");\
		to_xml(out, v.attr28); \
	out.append("\"");\
		out.append(", " #attr29 "=\"");\
		to_xml(out, v.attr29); \
	out.append("\"");\
		out.append(", " #attr30 "=\"");\
		to_xml(out, v.attr30); \
	out.append("\"");\



#define XML_FIRST_ATTR_OUT(tag_name, a)  \
	out.append("<"); out.append(tag_name); \
	MACRO_CALL(CAT(XML_ATTR_OUT_, UNPACK_HEAD(a)), UNPACK_REST(a)) \
	out.append(">"); \


#define XML_FIRST_ELEMENT_OUT(tag_name, a) \
	out.append("<"); out.append(tag_name), out.append(">");\
	to_xml_member2(out, #a, v.a);\



#define XML_PROCESS_FIRST_PARAM(tag_name, a) \
    IF(IS_SIMPLE_PARAM(a))(DEFER(XML_FIRST_ELEMENT_OUT) (tag_name, a), \
        DEFER(XML_FIRST_ATTR_OUT)(tag_name, a))


#define DEF_TO_XML1(type , arg1) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML2(type , arg1, arg2) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML3(type , arg1, arg2, arg3) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML4(type , arg1, arg2, arg3, arg4) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML5(type , arg1, arg2, arg3, arg4, arg5) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML6(type , arg1, arg2, arg3, arg4, arg5, arg6) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML7(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML8(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML9(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML10(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML11(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML12(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML13(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML14(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML15(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML16(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML17(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML18(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML19(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML20(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML21(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML22(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML23(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML24(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML25(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML26(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML27(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    to_xml_member2(out, #arg27, v.arg27); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML28(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    to_xml_member2(out, #arg27, v.arg27); \
    to_xml_member2(out, #arg28, v.arg28); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML29(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, \
    arg29) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    to_xml_member2(out, #arg27, v.arg27); \
    to_xml_member2(out, #arg28, v.arg28); \
    to_xml_member2(out, #arg29, v.arg29); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \


#define DEF_TO_XML30(type , arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, \
    arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, \
    arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, \
    arg29, arg30) \
inline \
void to_xml(std::string & out, type const & v, const char * tag_name=#type) { \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    to_xml_member2(out, #arg27, v.arg27); \
    to_xml_member2(out, #arg28, v.arg28); \
    to_xml_member2(out, #arg29, v.arg29); \
    to_xml_member2(out, #arg30, v.arg30); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml(type const & v) { \
    std::string out; \
    to_xml(out, v); \
    return out; \
}  \




#define DEF_TO_XML_MEM1(tagname , arg1) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM2(tagname , arg1, arg2) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM3(tagname , arg1, arg2, arg3) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM4(tagname , arg1, arg2, arg3, arg4) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM5(tagname , arg1, arg2, arg3, arg4, arg5) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM6(tagname , arg1, arg2, arg3, arg4, arg5, arg6) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM7(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM8(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM9(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM10(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM11(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM12(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM13(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM14(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM15(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM16(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM17(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM18(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM19(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM20(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM21(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM22(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21, arg22) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM23(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21, arg22, arg23) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM24(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21, arg22, arg23, arg24) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM25(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM26(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM27(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    to_xml_member2(out, #arg27, v.arg27); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM28(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, \
    arg28) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    to_xml_member2(out, #arg27, v.arg27); \
    to_xml_member2(out, #arg28, v.arg28); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM29(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, \
    arg28, arg29) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    to_xml_member2(out, #arg27, v.arg27); \
    to_xml_member2(out, #arg28, v.arg28); \
    to_xml_member2(out, #arg29, v.arg29); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#define DEF_TO_XML_MEM30(tagname , arg1, arg2, arg3, arg4, arg5, arg6, arg7, \
    arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, \
    arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, \
    arg28, arg29, arg30) \
inline \
void to_xml(std::string & out, const char * tag_name=tagname) const { \
    typeof(*this) const &v = *this; \
    XML_PROCESS_FIRST_PARAM(tag_name, arg1) \
    to_xml_member2(out, #arg2, v.arg2); \
    to_xml_member2(out, #arg3, v.arg3); \
    to_xml_member2(out, #arg4, v.arg4); \
    to_xml_member2(out, #arg5, v.arg5); \
    to_xml_member2(out, #arg6, v.arg6); \
    to_xml_member2(out, #arg7, v.arg7); \
    to_xml_member2(out, #arg8, v.arg8); \
    to_xml_member2(out, #arg9, v.arg9); \
    to_xml_member2(out, #arg10, v.arg10); \
    to_xml_member2(out, #arg11, v.arg11); \
    to_xml_member2(out, #arg12, v.arg12); \
    to_xml_member2(out, #arg13, v.arg13); \
    to_xml_member2(out, #arg14, v.arg14); \
    to_xml_member2(out, #arg15, v.arg15); \
    to_xml_member2(out, #arg16, v.arg16); \
    to_xml_member2(out, #arg17, v.arg17); \
    to_xml_member2(out, #arg18, v.arg18); \
    to_xml_member2(out, #arg19, v.arg19); \
    to_xml_member2(out, #arg20, v.arg20); \
    to_xml_member2(out, #arg21, v.arg21); \
    to_xml_member2(out, #arg22, v.arg22); \
    to_xml_member2(out, #arg23, v.arg23); \
    to_xml_member2(out, #arg24, v.arg24); \
    to_xml_member2(out, #arg25, v.arg25); \
    to_xml_member2(out, #arg26, v.arg26); \
    to_xml_member2(out, #arg27, v.arg27); \
    to_xml_member2(out, #arg28, v.arg28); \
    to_xml_member2(out, #arg29, v.arg29); \
    to_xml_member2(out, #arg30, v.arg30); \
    out.append("</"); out.append(tag_name); out.append(">"); \
} \
inline \
std::string to_xml() const{ \
	std::string out; \
	this->to_xml(out); \
	return out; \
}\


#endif  //TO_XML_HPP
